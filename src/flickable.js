// Generated by CoffeeScript 1.6.2
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function(global, document) {
  "use strict";
  var Flickable;

  Flickable = (function() {
    function Flickable(el, opts) {
      var isTouch, touchEndEvent, touchMoveEvent, touchStartEvent;

      if (opts == null) {
        opts = {};
      }
      this.el = el;
      if (typeof this.el === "string") {
        this.el = document.querySelector(el);
      } else if (!this.el) {
        throw new Error("Element Not Found");
      }
      isTouch = __indexOf.call(global, 'ontouchstart') >= 0;
      touchStartEvent = isTouch ? "touchstart" : "mousedown";
      touchMoveEvent = isTouch ? "touchmove" : "mousemove";
      touchEndEvent = isTouch ? "touchend" : "mouseup";
      opts = opts || {};
      this.distance = !opts.distance ? null : opts.distance;
      this.maxPoint = !opts.maxPoint ? null : opts.maxPoint;
      opts.transition = opts.transition || {};
      this.transition = {
        duration: !opts.transition["duration"] ? "330ms" : opts.transition["duration"],
        timingFunction: !opts.transition["timingFunction"] ? "cubic-bezier(0, 0, 0, 0.25, 1)" : opts.transition["timingFunction"]
      };
      this.currentPoint = 0;
      this.currentX = 0;
      this.el.addEventListener(touchStartEvent, this, false);
      return this;
    }

    Flickable.prototype.handleEvent = function(event) {
      switch (event["typeof"]) {
        case touchStartEvent:
          return this._touchStart(event);
        case touchMoveEvent:
          return this._touchMove(event);
        case touchEndEvent:
          return this._touchEnd(event);
        case "click":
          return this._click(event);
      }
    };

    Flickable.prototype.refresh = function() {};

    Flickable.prototype._touchStart = function(event) {};

    Flickable.prototype._touchMove = function(event) {};

    Flickable.prototype._touchEnd = function(event) {};

    Flickable.prototype._click = function(event) {
      event.stopPropagation();
      event.preventDefault();
    };

    return Flickable;

  })();
  return global.Flickable = Flickable;
})(this, this.document);
