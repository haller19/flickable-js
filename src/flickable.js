// Generated by CoffeeScript 1.6.2
define(["../src/helper"], function(Helper) {
  return (function(global, document) {
    "use strict";
    var Flickable;

    return Flickable = (function() {
      function Flickable(element, opts) {
        if (opts == null) {
          opts = {};
        }
        this.el = element;
        this.helper = new Helper();
        this.browser = this.helper.checkBrowser();
        this.support = this.helper.checkSupport();
        this.events = this.helper.checkTouchEvents();
        if (typeof this.el === "string") {
          this.el = document.querySelector(el);
        } else if (!this.el) {
          throw new Error("Element Not Found");
        }
        this.distance = !opts.distance ? null : opts.distance;
        this.maxPoint = !opts.maxPoint ? null : opts.maxPoint;
        opts.transition = opts.transition || {};
        this.transition = {
          duration: !opts.transition["duration"] ? "330ms" : opts.transition["duration"],
          timingFunction: !opts.transition["timingFunction"] ? "cubic-bezier(0, 0, 0, 0.25, 1)" : opts.transition["timingFunction"]
        };
        this.currentPoint = 0;
        this.currentX = 0;
        this.el.addEventListener(this.events.touchStart, this, false);
        return this;
      }

      Flickable.prototype.handleEvent = function(event) {
        switch (event["typeof"]) {
          case this.events.touchStart:
            return this._touchStart(event);
          case this.events.touchMove:
            return this._touchMove(event);
          case this.events.touchEnd:
            return this._touchEnd(event);
          case "click":
            return this._click(event);
        }
      };

      Flickable.prototype.refresh = function() {};

      Flickable.prototype.hasPrev = function() {
        return this.currentPoint > 0;
      };

      Flickable.prototype.hasNext = function() {
        return this.currentPoint < this.maxPoint;
      };

      Flickable.prototype.toPrev = function() {
        if (!this.hasPrev()) {
          return;
        }
        return this.moveToPoint(this.currentPoint - 1);
      };

      Flickable.prototype.toNext = function() {
        if (!this.hasNext()) {
          return;
        }
        return this.moveToPoint(this.currentPoint + 1);
      };

      Flickable.prototype.destroy = function() {
        return this.el.removeEventListener(this.events.touchStart, this, false);
      };

      Flickable.prototype._touchStart = function(event) {};

      Flickable.prototype._touchMove = function(event) {};

      Flickable.prototype._touchEnd = function(event) {};

      Flickable.prototype._click = function(event) {
        event.stopPropagation();
        return event.preventDefault();
      };

      return Flickable;

    })();
  })(this, this.document);
});
