// Generated by CoffeeScript 1.6.2
define(["mocha", "chai", "../src/helper"], function(Mocha, Chai, Helper) {
  var expect;

  expect = Chai.expect;
  return describe("Helper Class", function() {
    var helper;

    helper = new Helper();
    describe(".hasProp()", function() {
      it("先行実装な CSS Property の配列を渡すと存在するかチェケラする。今どき transform ならあるよね", function() {
        var props;

        props = ["transformProperty", "WebkitTransform", "MozTransform", "OTransform", "msTransform"];
        expect(helper.hasProp(props)).to.be["instanceof"](Array);
        return expect(helper.hasProp(props)).to.contain(true);
      });
      it("svgMatrixZ とかいうイミフなプロパティ達を渡したら当然 true を含まない Array が返ってくる", function() {
        var props;

        props = ["svgMatrixZ", "WebkitSvgMatrixZ", "MozSvgMatrixZ", "OSvgMatrixZ", "msMatrixZ"];
        expect(helper.hasProp(props)).to.be["instanceof"](Array);
        return expect(helper.hasProp(props)).to.not.contain(true);
      });
      return it("Array じゃないもの渡されても困るので null を返す", function() {
        return expect(helper.hasProp("WebkitTransform")).to.be.a("null");
      });
    });
    describe(".setStyle()", function() {});
    describe(".getCSSVal()", function() {
      it("仮に webkit だとしたら、transform を入れると \"-webkit-transform\" が返ってくる", function() {
        expect(helper.getCSSVal("transform")).to.be.a("string");
        return expect(helper.getCSSVal("transform")).to.equal("-webkit-transform");
      });
      it("width とか prefix なしで余裕なプロパティいれるとありのまま木の実ナナで返ってくる", function() {
        expect(helper.getCSSVal("width")).to.be.a("string");
        return expect(helper.getCSSVal("width")).to.equal("width");
      });
      return it("うっかり配列とか入れたら null 返して激おこプンプン丸", function() {
        return expect(helper.getCSSVal([1, 2, 3])).to.be.a("null");
      });
    });
    return describe(".ucFirst()", function() {
      it("String を渡すと先頭が大文字で返ってくる", function() {
        expect(helper.ucFirst("webkitTransform")).to.be.a("string");
        return expect(helper.ucFirst("webkitTransform")).to.equal("WebkitTransform");
      });
      it("String だけどアルファベットじゃない君はありのままの君", function() {
        expect(helper.ucFirst("123")).to.be.a("string");
        return expect(helper.ucFirst("123")).to.equal("123");
      });
      return it("String じゃないものだったら null を返す", function() {
        return expect(helper.ucFirst([1, 2, 3])).to.be.a("null");
      });
    });
  });
});
